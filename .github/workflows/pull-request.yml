name: MAIN_PULL_REQUEST

on:
  pull_request:
    branches: [develop, main, compositionAPI]
    # opened：当 PR 创建时触发
    # synchronize：当 PR 的源分支有新的提交时触发
    # reopened：当关闭的 PR 重新打开时触发
    types: [opened, synchronize, reopened]
  # workflow_dispatch：允许手动触发工作流
  workflow_dispatch:

# todo: paopao 
# jobs:
#   call-test-build:
#     uses: Tencent/tdesign/.github/workflows/test-build.yml@main

jobs:
  build:
    # 在最新版本的 Ubuntu 环境中运行
    runs-on: ubuntu-latest
    # 如果需要依赖自身任务，可以取消注释（通常不需要）
    # needs: build
    steps:
      # 检出代码仓库，并递归初始化子模块
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # 设置 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      # 设置 Node.js 环境，版本为 18
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      # 获取 pnpm 的存储目录路径
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "pnpm_cache_dir=$(pnpm store path)" >> $GITHUB_OUTPUT

      # 设置 pnpm 缓存
      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          # 缓存路径
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          # 缓存键
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          # 恢复缓存的备用键
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 安装依赖
      - run: pnpm i

      # 运行构建任务
      - name: Build 
        run: pnpm run build